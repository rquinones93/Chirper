// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  chirp: (where?: ChirpWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  chirp: (where: ChirpWhereUniqueInput) => ChirpNullablePromise;
  chirps: (args?: {
    where?: ChirpWhereInput;
    orderBy?: ChirpOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Chirp>;
  chirpsConnection: (args?: {
    where?: ChirpWhereInput;
    orderBy?: ChirpOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ChirpConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createChirp: (data: ChirpCreateInput) => ChirpPromise;
  updateChirp: (args: {
    data: ChirpUpdateInput;
    where: ChirpWhereUniqueInput;
  }) => ChirpPromise;
  updateManyChirps: (args: {
    data: ChirpUpdateManyMutationInput;
    where?: ChirpWhereInput;
  }) => BatchPayloadPromise;
  upsertChirp: (args: {
    where: ChirpWhereUniqueInput;
    create: ChirpCreateInput;
    update: ChirpUpdateInput;
  }) => ChirpPromise;
  deleteChirp: (where: ChirpWhereUniqueInput) => ChirpPromise;
  deleteManyChirps: (where?: ChirpWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  chirp: (
    where?: ChirpSubscriptionWhereInput
  ) => ChirpSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type PrivacyStatus = "PRIVATE" | "PUBLIC";

export type ChirpOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "content_ASC"
  | "content_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "bio_ASC"
  | "bio_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "password_ASC"
  | "password_DESC"
  | "pinnedChirp_ASC"
  | "pinnedChirp_DESC"
  | "privacyStatus_ASC"
  | "privacyStatus_DESC"
  | "profilePicture_ASC"
  | "profilePicture_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "username_ASC"
  | "username_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface ChirpUpdateInput {
  content?: Maybe<String>;
  owner?: Maybe<UserUpdateOneRequiredWithoutChirpsInput>;
}

export type ChirpWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface UserUpsertWithoutChirpsInput {
  update: UserUpdateWithoutChirpsDataInput;
  create: UserCreateWithoutChirpsInput;
}

export interface ChirpWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  content?: Maybe<String>;
  content_not?: Maybe<String>;
  content_in?: Maybe<String[] | String>;
  content_not_in?: Maybe<String[] | String>;
  content_lt?: Maybe<String>;
  content_lte?: Maybe<String>;
  content_gt?: Maybe<String>;
  content_gte?: Maybe<String>;
  content_contains?: Maybe<String>;
  content_not_contains?: Maybe<String>;
  content_starts_with?: Maybe<String>;
  content_not_starts_with?: Maybe<String>;
  content_ends_with?: Maybe<String>;
  content_not_ends_with?: Maybe<String>;
  owner?: Maybe<UserWhereInput>;
  AND?: Maybe<ChirpWhereInput[] | ChirpWhereInput>;
  OR?: Maybe<ChirpWhereInput[] | ChirpWhereInput>;
  NOT?: Maybe<ChirpWhereInput[] | ChirpWhereInput>;
}

export interface ChirpUpdateManyWithoutOwnerInput {
  create?: Maybe<ChirpCreateWithoutOwnerInput[] | ChirpCreateWithoutOwnerInput>;
  delete?: Maybe<ChirpWhereUniqueInput[] | ChirpWhereUniqueInput>;
  connect?: Maybe<ChirpWhereUniqueInput[] | ChirpWhereUniqueInput>;
  set?: Maybe<ChirpWhereUniqueInput[] | ChirpWhereUniqueInput>;
  disconnect?: Maybe<ChirpWhereUniqueInput[] | ChirpWhereUniqueInput>;
  update?: Maybe<
    | ChirpUpdateWithWhereUniqueWithoutOwnerInput[]
    | ChirpUpdateWithWhereUniqueWithoutOwnerInput
  >;
  upsert?: Maybe<
    | ChirpUpsertWithWhereUniqueWithoutOwnerInput[]
    | ChirpUpsertWithWhereUniqueWithoutOwnerInput
  >;
  deleteMany?: Maybe<ChirpScalarWhereInput[] | ChirpScalarWhereInput>;
  updateMany?: Maybe<
    ChirpUpdateManyWithWhereNestedInput[] | ChirpUpdateManyWithWhereNestedInput
  >;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  bio?: Maybe<String>;
  chirps?: Maybe<ChirpCreateManyWithoutOwnerInput>;
  password?: Maybe<String>;
  pinnedChirp?: Maybe<Int>;
  privacyStatus?: Maybe<PrivacyStatus>;
  profilePicture?: Maybe<String>;
  username: String;
}

export interface ChirpUpdateManyMutationInput {
  content?: Maybe<String>;
}

export interface ChirpSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ChirpWhereInput>;
  AND?: Maybe<ChirpSubscriptionWhereInput[] | ChirpSubscriptionWhereInput>;
  OR?: Maybe<ChirpSubscriptionWhereInput[] | ChirpSubscriptionWhereInput>;
  NOT?: Maybe<ChirpSubscriptionWhereInput[] | ChirpSubscriptionWhereInput>;
}

export interface ChirpCreateInput {
  id?: Maybe<ID_Input>;
  content: String;
  owner: UserCreateOneWithoutChirpsInput;
}

export interface ChirpUpdateManyDataInput {
  content?: Maybe<String>;
}

export interface UserCreateOneWithoutChirpsInput {
  create?: Maybe<UserCreateWithoutChirpsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface ChirpScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  content?: Maybe<String>;
  content_not?: Maybe<String>;
  content_in?: Maybe<String[] | String>;
  content_not_in?: Maybe<String[] | String>;
  content_lt?: Maybe<String>;
  content_lte?: Maybe<String>;
  content_gt?: Maybe<String>;
  content_gte?: Maybe<String>;
  content_contains?: Maybe<String>;
  content_not_contains?: Maybe<String>;
  content_starts_with?: Maybe<String>;
  content_not_starts_with?: Maybe<String>;
  content_ends_with?: Maybe<String>;
  content_not_ends_with?: Maybe<String>;
  AND?: Maybe<ChirpScalarWhereInput[] | ChirpScalarWhereInput>;
  OR?: Maybe<ChirpScalarWhereInput[] | ChirpScalarWhereInput>;
  NOT?: Maybe<ChirpScalarWhereInput[] | ChirpScalarWhereInput>;
}

export interface UserCreateWithoutChirpsInput {
  id?: Maybe<ID_Input>;
  bio?: Maybe<String>;
  password?: Maybe<String>;
  pinnedChirp?: Maybe<Int>;
  privacyStatus?: Maybe<PrivacyStatus>;
  profilePicture?: Maybe<String>;
  username: String;
}

export interface ChirpUpsertWithWhereUniqueWithoutOwnerInput {
  where: ChirpWhereUniqueInput;
  update: ChirpUpdateWithoutOwnerDataInput;
  create: ChirpCreateWithoutOwnerInput;
}

export interface UserUpdateInput {
  bio?: Maybe<String>;
  chirps?: Maybe<ChirpUpdateManyWithoutOwnerInput>;
  password?: Maybe<String>;
  pinnedChirp?: Maybe<Int>;
  privacyStatus?: Maybe<PrivacyStatus>;
  profilePicture?: Maybe<String>;
  username?: Maybe<String>;
}

export interface ChirpUpdateWithWhereUniqueWithoutOwnerInput {
  where: ChirpWhereUniqueInput;
  data: ChirpUpdateWithoutOwnerDataInput;
}

export interface UserUpdateOneRequiredWithoutChirpsInput {
  create?: Maybe<UserCreateWithoutChirpsInput>;
  update?: Maybe<UserUpdateWithoutChirpsDataInput>;
  upsert?: Maybe<UserUpsertWithoutChirpsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateManyMutationInput {
  bio?: Maybe<String>;
  password?: Maybe<String>;
  pinnedChirp?: Maybe<Int>;
  privacyStatus?: Maybe<PrivacyStatus>;
  profilePicture?: Maybe<String>;
  username?: Maybe<String>;
}

export interface ChirpCreateManyWithoutOwnerInput {
  create?: Maybe<ChirpCreateWithoutOwnerInput[] | ChirpCreateWithoutOwnerInput>;
  connect?: Maybe<ChirpWhereUniqueInput[] | ChirpWhereUniqueInput>;
}

export interface ChirpCreateWithoutOwnerInput {
  id?: Maybe<ID_Input>;
  content: String;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  bio?: Maybe<String>;
  bio_not?: Maybe<String>;
  bio_in?: Maybe<String[] | String>;
  bio_not_in?: Maybe<String[] | String>;
  bio_lt?: Maybe<String>;
  bio_lte?: Maybe<String>;
  bio_gt?: Maybe<String>;
  bio_gte?: Maybe<String>;
  bio_contains?: Maybe<String>;
  bio_not_contains?: Maybe<String>;
  bio_starts_with?: Maybe<String>;
  bio_not_starts_with?: Maybe<String>;
  bio_ends_with?: Maybe<String>;
  bio_not_ends_with?: Maybe<String>;
  chirps_every?: Maybe<ChirpWhereInput>;
  chirps_some?: Maybe<ChirpWhereInput>;
  chirps_none?: Maybe<ChirpWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  pinnedChirp?: Maybe<Int>;
  pinnedChirp_not?: Maybe<Int>;
  pinnedChirp_in?: Maybe<Int[] | Int>;
  pinnedChirp_not_in?: Maybe<Int[] | Int>;
  pinnedChirp_lt?: Maybe<Int>;
  pinnedChirp_lte?: Maybe<Int>;
  pinnedChirp_gt?: Maybe<Int>;
  pinnedChirp_gte?: Maybe<Int>;
  privacyStatus?: Maybe<PrivacyStatus>;
  privacyStatus_not?: Maybe<PrivacyStatus>;
  privacyStatus_in?: Maybe<PrivacyStatus[] | PrivacyStatus>;
  privacyStatus_not_in?: Maybe<PrivacyStatus[] | PrivacyStatus>;
  profilePicture?: Maybe<String>;
  profilePicture_not?: Maybe<String>;
  profilePicture_in?: Maybe<String[] | String>;
  profilePicture_not_in?: Maybe<String[] | String>;
  profilePicture_lt?: Maybe<String>;
  profilePicture_lte?: Maybe<String>;
  profilePicture_gt?: Maybe<String>;
  profilePicture_gte?: Maybe<String>;
  profilePicture_contains?: Maybe<String>;
  profilePicture_not_contains?: Maybe<String>;
  profilePicture_starts_with?: Maybe<String>;
  profilePicture_not_starts_with?: Maybe<String>;
  profilePicture_ends_with?: Maybe<String>;
  profilePicture_not_ends_with?: Maybe<String>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  username?: Maybe<String>;
  username_not?: Maybe<String>;
  username_in?: Maybe<String[] | String>;
  username_not_in?: Maybe<String[] | String>;
  username_lt?: Maybe<String>;
  username_lte?: Maybe<String>;
  username_gt?: Maybe<String>;
  username_gte?: Maybe<String>;
  username_contains?: Maybe<String>;
  username_not_contains?: Maybe<String>;
  username_starts_with?: Maybe<String>;
  username_not_starts_with?: Maybe<String>;
  username_ends_with?: Maybe<String>;
  username_not_ends_with?: Maybe<String>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface UserUpdateWithoutChirpsDataInput {
  bio?: Maybe<String>;
  password?: Maybe<String>;
  pinnedChirp?: Maybe<Int>;
  privacyStatus?: Maybe<PrivacyStatus>;
  profilePicture?: Maybe<String>;
  username?: Maybe<String>;
}

export interface ChirpUpdateManyWithWhereNestedInput {
  where: ChirpScalarWhereInput;
  data: ChirpUpdateManyDataInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface ChirpUpdateWithoutOwnerDataInput {
  content?: Maybe<String>;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  username?: Maybe<String>;
}>;

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValues {
  id: ID_Output;
  bio?: String;
  createdAt: DateTimeOutput;
  password?: String;
  pinnedChirp?: Int;
  privacyStatus?: PrivacyStatus;
  profilePicture?: String;
  updatedAt: DateTimeOutput;
  username: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  bio: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  password: () => Promise<String>;
  pinnedChirp: () => Promise<Int>;
  privacyStatus: () => Promise<PrivacyStatus>;
  profilePicture: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  username: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  bio: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  password: () => Promise<AsyncIterator<String>>;
  pinnedChirp: () => Promise<AsyncIterator<Int>>;
  privacyStatus: () => Promise<AsyncIterator<PrivacyStatus>>;
  profilePicture: () => Promise<AsyncIterator<String>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  username: () => Promise<AsyncIterator<String>>;
}

export interface ChirpPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  content: String;
}

export interface ChirpPreviousValuesPromise
  extends Promise<ChirpPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  content: () => Promise<String>;
}

export interface ChirpPreviousValuesSubscription
  extends Promise<AsyncIterator<ChirpPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  content: () => Promise<AsyncIterator<String>>;
}

export interface Chirp {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  content: String;
}

export interface ChirpPromise extends Promise<Chirp>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  content: () => Promise<String>;
  owner: <T = UserPromise>() => T;
}

export interface ChirpSubscription
  extends Promise<AsyncIterator<Chirp>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  content: () => Promise<AsyncIterator<String>>;
  owner: <T = UserSubscription>() => T;
}

export interface ChirpNullablePromise
  extends Promise<Chirp | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  content: () => Promise<String>;
  owner: <T = UserPromise>() => T;
}

export interface AggregateChirp {
  count: Int;
}

export interface AggregateChirpPromise
  extends Promise<AggregateChirp>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChirpSubscription
  extends Promise<AsyncIterator<AggregateChirp>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ChirpEdge {
  node: Chirp;
  cursor: String;
}

export interface ChirpEdgePromise extends Promise<ChirpEdge>, Fragmentable {
  node: <T = ChirpPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ChirpEdgeSubscription
  extends Promise<AsyncIterator<ChirpEdge>>,
    Fragmentable {
  node: <T = ChirpSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface ChirpConnection {
  pageInfo: PageInfo;
  edges: ChirpEdge[];
}

export interface ChirpConnectionPromise
  extends Promise<ChirpConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ChirpEdge>>() => T;
  aggregate: <T = AggregateChirpPromise>() => T;
}

export interface ChirpConnectionSubscription
  extends Promise<AsyncIterator<ChirpConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ChirpEdgeSubscription>>>() => T;
  aggregate: <T = AggregateChirpSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface ChirpSubscriptionPayload {
  mutation: MutationType;
  node: Chirp;
  updatedFields: String[];
  previousValues: ChirpPreviousValues;
}

export interface ChirpSubscriptionPayloadPromise
  extends Promise<ChirpSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ChirpPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ChirpPreviousValuesPromise>() => T;
}

export interface ChirpSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ChirpSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ChirpSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ChirpPreviousValuesSubscription>() => T;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface User {
  id: ID_Output;
  bio?: String;
  createdAt: DateTimeOutput;
  password?: String;
  pinnedChirp?: Int;
  privacyStatus?: PrivacyStatus;
  profilePicture?: String;
  updatedAt: DateTimeOutput;
  username: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  bio: () => Promise<String>;
  chirps: <T = FragmentableArray<Chirp>>(args?: {
    where?: ChirpWhereInput;
    orderBy?: ChirpOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  password: () => Promise<String>;
  pinnedChirp: () => Promise<Int>;
  privacyStatus: () => Promise<PrivacyStatus>;
  profilePicture: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  username: () => Promise<String>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  bio: () => Promise<AsyncIterator<String>>;
  chirps: <T = Promise<AsyncIterator<ChirpSubscription>>>(args?: {
    where?: ChirpWhereInput;
    orderBy?: ChirpOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  password: () => Promise<AsyncIterator<String>>;
  pinnedChirp: () => Promise<AsyncIterator<Int>>;
  privacyStatus: () => Promise<AsyncIterator<PrivacyStatus>>;
  profilePicture: () => Promise<AsyncIterator<String>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  username: () => Promise<AsyncIterator<String>>;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  bio: () => Promise<String>;
  chirps: <T = FragmentableArray<Chirp>>(args?: {
    where?: ChirpWhereInput;
    orderBy?: ChirpOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  password: () => Promise<String>;
  pinnedChirp: () => Promise<Int>;
  privacyStatus: () => Promise<PrivacyStatus>;
  profilePicture: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  username: () => Promise<String>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

export type Long = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Chirp",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  },
  {
    name: "PrivacyStatus",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
